<?php namespace ProcessWire;

/**
 * Pageimage Source
 *
 * #pw-summary Extends Pageimage with a srcset property/method plus additional rendering options.
 *
 * @copyright 2021 NB Communication Ltd
 * @license Mozilla Public License v2.0 http://mozilla.org/MPL/2.0/
 *
 * @property string $defaultSets
 * @property bool $webp
 * @property int $webpQuality
 * @property bool $useLazy
 * @property bool $usePicture
 * @property bool $removeVariations
 *
 */

class PageimageSource extends WireData implements Module, ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {
		return [
			'title' => 'Pageimage Source',
			'version' => 010,
			'summary' => 'Extends Pageimage with a srcset property/method and additional rendering options.',
			'author' => 'nbcommunication',
			'href' => 'https://github.com/nbcommunication/PageimageSource',
			'singular' => true,
			'autoload' => 'template!=admin',
			'icon' => 'picture-o',
			'requires' => 'ProcessWire>=3.0.165,PHP>=7.3',
		];
	}

	/**
	 * Appended to the name of the images generated by this module
	 *
	 * Used to remove old variations.
	 *
	 * @var string
	 *
	 */
	const suffix = 'srcset';

	/**
	 * An array of `srcset` widths
	 *
	 * @var array
	 *
	 */
	protected $srcset = [];

	/**
	 * Initialize the module
	 *
	 */
	public function init() {

		$input = $this->wire('input');
		$isAdmin = $this->wire('page')->template->name === 'admin';

		// Get and set image srcset widths
		if($this->defaultSets) {
			$this->srcset = $this->getSrcset();
		}

		// If module config loaded
		if($isAdmin) {

			if(!$this->defaultSets && !$input->post->textarea('defaultSets') && !$input->post->bool('uninstall')) {
				$this->error($this->_('Please enter a srcset configuration.'));
				return;
			}

			if($input->post->bool('removeVariations')) {
				// Remove srcset variations if requested
				$count = 0;
				$dirs = new \DirectoryIterator($this->wire('config')->paths->files);
				foreach($dirs as $dir) {
					if($dir->isFile() || $dir->isDot()) continue;
					$dir = new \DirectoryIterator($dir->getPathname());
					foreach($dir as $file) {
						if(strpos($file->getFilename(), '-' . self::suffix . '.') !== false) {
							$count++;
							$this->wire('files')->unlink($file->getPathname());
						}
					}
				}

				$input->post->removeVariations = 0;
				if($count) $this->message(sprintf($this->_('%d variations removed'), $count));
			}
		}

		// Pageimage::srcset
		$hookMethods = implode(',', [
			'Pageimage::srcset',
			'Pageimage::httpSrcset',
			'Pageimage::SRCSET',
			'Pageimage::HTTPSRCSET',
		]);
		$this->addHook($hookMethods, $this, 'getImageSrcset');
		$this->addHookProperty($hookMethods, $this, 'getImageSrcset');

		// Pageimage::render
		$this->addHookAfter('Pageimage::render', $this, 'render');
	}

	/**
	 * When ProcessWire is ready
	 *
	 */
	public function ready() {

	}

	/**
	 * Generate srcset images and return its attribute string
	 *
	 * `$pageimage->srcset()` accepts two arguments:
	 * - `srcset` (string|array): The srcset configuration.
	 * - `options` (array): Options to modify default sizing behaviour.
	 * For more information visit https://processwire.com/api/ref/pageimage/size/.
	 *
	 * #pw-hooker
	 * #pw-hookable
	 *
	 * @param HookEvent $event
	 * @return string
	 *
	 */
	public function ___getImageSrcset(HookEvent $event) {

		$sanitizer = $this->wire('sanitizer');

		$image = $event->object;
		$name = $image->basename;
		$srcset = $event->arguments(0);
		$options = $event->arguments(1);
		$property = [
			'srcset' => $this->webp ? 'webpUrl' : 'url',
			'httpSrcset' => 'httpUrl',
			'SRCSET' => 'URL',
			'HTTPSRCSET' => 'HTTPURL',
		][$event->method];

		// Handle shortcuts
		if(!is_array($srcset) && !is_string($srcset)) $srcset = $this->srcset;
		if(!is_array($options)) $options = [];

		// Get srcset config
		$srcset = $this->getSrcset($srcset);

		// Set default size options
		$options = array_merge([
			'suffix' => self::suffix,
			'upscaling' => false,
			'webpAdd' => $this->webp,
			'webpQuality' => $this->webpQuality,
		], $options);

		// Image Parameters
		$imageWidth = $image->width;
		$imageHeight = $image->height;
		$ratio = $imageWidth && $imageHeight ? $imageWidth / $imageHeight : 1;

		// Handle image variations
		$variation = $image->isVariation($name, ['allowSelf' => true]);
		if($variation) {
			// Image is a variation, get original and variant dimensions
			$image = $image->getOriginal();
			$imageWidth = $variation['width'];
			$imageHeight = $variation['height'];
		}

		$sets = [];
		$break = false;
		foreach($srcset as $rule => $dimensions) {

			$cropWidth = $sanitizer->int($dimensions[0]);
			$cropHeight = $sanitizer->int($dimensions[1] ?? 0);

			$wider = $imageWidth > $cropWidth;
			$higher = $imageHeight > $cropHeight;

			$img = null;
			if(($cropWidth || $cropHeight) && ($wider || $higher)) {

				if(!$options['upscaling']) {
					if($imageWidth && $cropWidth > $imageWidth) {
						$cropWidth = $imageWidth;
					}
					if($imageHeight && $cropHeight > $imageHeight) {
						$cropHeight = $imageHeight;
					}
				}

				if($variation && (!$cropWidth || !$cropHeight)) {

					$ratioHeight = $cropWidth / $ratio;
					if($imageHeight && $ratioHeight > $imageHeight) {
						$ratioHeight = $imageHeight;
					}

					if($imageWidth && $imageHeight) {

						if(!$cropWidth) {
							$cropWidth = $cropHeight;
							$cropHeight = $cropHeight / $ratio;
						}

						if($imageWidth > $cropWidth) {
							$img = $image->size($cropWidth, $cropHeight ?: $ratioHeight, $options);
						} else {
							$img = $event->object;
						}

					} else if($imageHeight && !$imageWidth) {

						if($imageHeight > $cropHeight && $imageHeight > $cropWidth) {
							$img = $image->height($cropHeight ?: $cropWidth, $options);
						} else {
							$img = $event->object;
							$break = true;
						}
					}
				}

				if(is_null($img) && $image->width > $cropWidth) {
					$img = $image->size($cropWidth, $cropHeight, $options);
				}

			} else if($cropHeight && $imageHeight > $cropHeight) {

				$img = $image->height($cropHeight, $options);
			}

			if(is_null($img)) {

				$img = $event->object;
				// No need for more sets
				$break = !$cropHeight;
			}

			// Add set
			if(!isset($sets[$rule])) $sets[$rule] = "{$img->$property} $rule";
			if($break) break;
		}

		$event->return = count($sets) ? implode(', ', $sets) : '';
	}

	/**
	 * Return a srcset config array
	 *
	 * Public varsion of getSrcset() / $srcset
	 * primarily for use in the config module.
	 *
	 * #pw-internal
	 *
	 * @param array|string $sets
	 * @return array
	 *
	 */
	public function getSets($sets = null) {
		return isset($sets) ? $this->getSrcset($sets) : $this->srcset;
	}

	/**
	 * Extend Pageimage::render
	 *
	 * #pw-hooker
	 * #pw-hookable
	 *
	 * @param HookEvent $event
	 * @return string
	 * @see Pageimage::render()
	 *
	 */
	public function render(HookEvent $event) {

		$image = $event->object;
		$img = $event->return;
		$markup = $event->arguments(0);
		$options = $event->arguments(1);
		if(is_null($options) && is_array($markup)) $options = $markup;
		if(!is_array($options)) $options = [];

		// Set default options and return
		$options = array_merge([
			'srcset' => true,
			'sizes' => '100vw',
			'lazy' => $this->useLazy,
			'picture' => $this->usePicture,
		], $options);

		$_webp = $this->webp;
		if(!in_array($image->ext, ['jpeg', 'jpg', 'png'])) $this->webp = false;

		if(!$this->webp) $options['picture'] = false;
		if($options['lazy']) $options['lazy'] = 'lazy';

		// Get resized image if width/height passed in options
		if(!empty($options['width']) || !empty($options['height'])) {
			$w = $options['width'] ?? 0;
			$h = $options['height'] ?? 0;
			$original = $image;
			$image = $image->size((int) $w, (int) $h, $options);
		}

		$attributes = [];
		$replacements = [];

		$apos = strpos($img, '"') === false ? "'" : '"';

		$isAttr = function($a) {
			return !empty($a) && is_string($a);
		};

		$hasAttr = function($a) use ($img) {
			return strpos($img, "$a=") !== false;
		};

		$getSrcset = function($webp = null) use ($image, $options) {
			$_webp = $this->webp;
			if(is_bool($webp)) {
				$this->wire('config')->webpOptions([
					'useSrcUrlOnSize' => false,
					'useSrcUrlOnFail' => false,
				]);
				$this->webp = $webp;
			}
			$srcset = '';
			if($options['srcset'] !== false) {
				if(is_array($options['srcset']) && $this->isArrayAssociative($options['srcset'])) {
					$srcset = $image->srcset($options['srcset']['rules'] ?? null, $options['srcset']['options'] ?? []);
				} else {
					$srcset = $image->srcset($options['srcset']);
				}
			}
			$this->webp = $_webp;
			return $srcset;
		};

		if(!$options['picture']) {

			// srcset
			$srcset = $getSrcset();
			if($hasAttr('srcset')) {
				$replacements['srcset'] = $srcset;
			} else if($isAttr($srcset)) {
				$attributes[] = "srcset=$apos{$srcset}$apos";
			}

			// sizes
			if($hasAttr('sizes')) {
				$replacements['sizes'] = $options['sizes'];
			} else if($isAttr($options['sizes']) && $srcset) {
				$attributes[] = "sizes=$apos{$options['sizes']}$apos";
			}
		}

		// lazy loading
		if($hasAttr('loading')) {
			$replacements['loading'] = $options['lazy'] ?: '';
		} else if($isAttr($options['lazy'])) {
			$attributes[] = "loading=$apos{$options['lazy']}$apos";
		}

		// Add attributes
		if(count($attributes)) {
			$img = rtrim($img, ' />') . ' ' . implode(' ', $attributes) . '>';
		}

		// Replace tags
		if(count($replacements)) {
			$img = str_replace(array_map(function($tag) {
				return '{' . $tag . '}';
			}, array_keys($replacements)), array_values($replacements), $img);
		}

		if($options['picture']) {

			$img = (is_string($options['picture']) && substr($options['picture'], 0, 8) === '<picture' ?
				$options['picture'] :
				'<picture>'
			) .
				'<source srcset="' . $getSrcset(true) . '" sizes="' . $options['sizes'] . '" type="image/webp">' .
				'<source srcset="' . $getSrcset(false) . '" sizes="' . $options['sizes'] . '" type="image/' .
					($image->ext === 'jpg' ? 'jpeg' : $image->ext) . '">' .
			"{$img}</picture>";

		} else if ($this->webp) {
			if($this->webpQuality) {
				$this->wire('config')->webpOptions('quality', $this->webpQuality);
			}
			$img = str_replace($image->url, $image->webpUrl, $img);
		}

		$this->webp = $_webp;

		// Render additional attributes
		$event->return = $img;
	}

	/**
	 * Return the srcset config array
	 *
	 * #pw-internal
	 *
	 * @param array|string $sets
	 * @return array
	 *
	 */
	protected function getSrcset($sets = null) {

		if(is_array($sets)) {
			// No rule checking performed
			if($this->isArrayAssociative($sets)) return $sets;
		} else {
			// Parse string to get sets ready for checking
			$sets = explode("\n", str_replace(',', "\n", (is_string($sets) ? $sets : $this->defaultSets)));
		}

		$input = $this->wire('input');
		$sanitizer = $this->wire('sanitizer');

		$srcset = [];
		$errors = [];
		foreach($sets as $line) {

			$line = trim($line);
			if(empty($line)) continue;

			$parts = explode(' ', $line);
			if(count($parts) > 2) {
				// Too many parts in the rule
				$errors[] = $line;
				continue;
			}

			$size = strtolower($parts[0]);
			$rule = count($parts) === 2 ? strtolower($parts[1]) : null;
			if(isset($rule) && (strpos($rule, 'w') === false && strpos($rule, 'x') === false)) {
				// Invalid Rule
				$errors[] = $line;
				continue;
			}

			$dimensions = explode('x', $size);
			if(empty($size) || count($dimensions) > 2) {
				// Too many or not enough dimensions
				$errors[] = $line;
				continue;
			}

			// Sanitize width/height as integers
			foreach($dimensions as $key => $value) {
				$int = $sanitizer->int($value);
				if(strlen($int) !== strlen($value)) {
					$errors[] = $line;
					continue 2;
				}
				$dimensions[$key] = $int;
			}

			$width = $dimensions[0];
			$height = count($dimensions) === 2 ? $dimensions[1] : 0;

			if(!($width + $height)) {
				// Both dimensions are zero
				$errors[] = $line;
				continue;
			}

			$srcset[$rule ?? ($width ?: $height) . 'w'] = [$width, $height];
		}

		if(count($errors) && !($input->post['defaultSets'] && count($input->post['defaultSets']) !== count($srcset))) {
			// Do not display errors when set rules are initially edited in the module config
			foreach($errors as $error) {
				$this->error(sprintf($this->_('%s is not a valid set rule.'), $error));
			}
		}

		return $srcset;
	}

	/**
	 * Check if an array is associative or sequential
	 *
	 * #pw-internal
	 *
	 * @param array $array The array to evaluate.
	 * @return bool
	 *
	 */
	private function isArrayAssociative(array $array) {
		if(array() === $array) return false;
		return array_keys($array) !== range(0, count($array) - 1);
	}
}

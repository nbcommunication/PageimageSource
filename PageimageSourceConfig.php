<?php namespace ProcessWire;

/**
 * Pageimage Source Configuration
 *
 */

class PageimageSourceConfig extends ModuleConfig {

	/**
	 * Returns default values for module variables
	 *
	 * @return array
	 *
	 */
	public function getDefaults() {
		return [
			'useLazy' => 1,
			'usePicture' => 0,
			'webp' => 0,
			'webpQuality' => 90,
		];
	}

	/**
	 * Returns inputs for module configuration
	 *
	 * @return InputfieldWrapper
	 *
	 */
	public function getInputfields() {

		$config = $this->wire('config');
		$modules = $this->wire('modules');

		$inputfields = parent::getInputfields();

		if($modules->isInstalled('ProcessWireAPI')) {
			// Add prism for code colouring
			$urlProcessWireAPI = $config->urls('ProcessWireAPI');
			$config->styles->add("$urlProcessWireAPI/prism.css");
			$config->scripts->add("$urlProcessWireAPI/prism.js");
		}

		// Get the module this configures
		$module = $modules->get(str_replace('Config', '', $this->className));

		$a2nl = function(array $a, $b = 1) {
			return implode(str_repeat("\n", $b), $a);
		};

		$preview = '';
		$example = '{width}x{height} {inherentwidth}w|{resolution}x';
		if($module->defaultSets) {

			// Get generated sets
			$attr = [];
			foreach($module->getSets() as $rule => $dimensions) {
				$attr[] = "image.{$dimensions[0]}x{$dimensions[1]}-" . $module::suffix . ".jpg $rule";
			}

			// Get defaultSets as a string and order correctly
			$args = explode("\n", $module->defaultSets);
			usort($args, function($a, $b) {
				$s = $this->wire('sanitizer');
				return $s->int(explode(' ', $a)[0]) <=> $s->int(explode(' ', $b)[0]);
			});

			$preview .= $a2nl([
				'// ' . $this->_('Sets generated'),
				$a2nl($attr),
				'',
				'// ' . $this->_('Equivalent method call'),
				'$srcset = $pageimage->srcset("'. implode(", ", $args) . '");',
				'',
			]);

		} else {

			$preview .= $a2nl([
				'/*',
				$this->_('Please configure the default set rules') . '.',
				$this->_('Set rules should use the following format') . ':',
				$example,
				$this->_('Only `width` is required') . '.',
				$this->_('Example') . ':',
				$a2nl(['320', '640', '768x480 960w', '1024', '2048 2x']),
				'*/',
			], 2);
		}

		$inputfields->add([
			'type' => 'textarea',
			'name' => 'defaultSets',
			'label' => $this->_('Default Set Rules'),
			'placeholder' => $example,
			'required' => !$this->wire('input')->post->bool('uninstall'),
			'notes' => $this->_('Each set rule should be entered on a new line.'),
			'icon' => 'arrows-alt',
			'rows' => substr_count($preview, "\n"), // Adjust the textarea based on preview
			'columnWidth' => 50,
		]);

		$inputfields->add([
			'type' => 'markup',
			'name' => 'previewSets',
			'label' => $this->_('Preview'),
			'value' => "<pre class=language-php><code class=language-php>$preview</code></pre>",
			'notes' => $this->_('A set will only be generated if the original image is wider or higher than the set dimensions.'),
			'icon' => 'eye',
			'columnWidth' => 50,
		]);


		$toggle = $modules->isInstalled('InputfieldToggle') ? 'toggle' : 'checkbox';

		// WebP
		$fieldset = $modules->get('InputfieldFieldset');
		$fieldset->label = $this->_('WebP');
		$fieldset->icon = 'picture-o';

		// WebP
		$fieldset->add([
			'type' => $toggle,
			'name' => 'webp',
			'label' => $this->_('Enable WebP Images?'),
			'icon' => 'toggle-on',
			'columnWidth' => 50,
		]);

		// WebP Quality
		$fieldset->add([
			'type' => 'integer',
			'name' => 'webpQuality',
			'label' => $this->_('WebP Quality'),
			'icon' => 'search-plus',
			'columnWidth' => 50,
			'showIf' => 'webp=1',
		]);

		$inputfields->add($fieldset);

		// Rendering
		$fieldset = $modules->get('InputfieldFieldset');
		$fieldset->label = $this->_('Rendering');
		$fieldset->icon = 'picture-o';

		// Lazy loading
		$fieldset->add([
			'type' => $toggle,
			'name' => 'useLazy',
			'label' => $this->_('Use Lazy Loading?'),
			'icon' => 'eye',
			'columnWidth' => 50,
		]);

		// Use <picture>
		$fieldset->add([
			'type' => $toggle,
			'name' => 'usePicture',
			'label' => sprintf($this->_('Use the %s element?'), '<picture>'),
			'icon' => 'code',
			'showIf' => 'webp=1',
			'columnWidth' => 50,
		]);

		$inputfields->add($fieldset);

		// Remove Variations
		$inputfields->add([
			'type' => 'checkbox',
			'name' => 'removeVariations',
			'label' => $this->_('Remove Variations'),
			'description' => $this->_('When checked, all variations generated by the module will be removed.'),
			'notes' => $this->_('This may take a long time on large sites.'),
			'value' => null,
			'icon' => 'trash',
			'collapsed' => 1,
		]);

		return $inputfields;
	}
}
